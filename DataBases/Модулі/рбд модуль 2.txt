1.	Мова визначення даних DDL SQL.
Це підмножина SQL, яка використовується для визначення та модифікації різних структур даних в базі даних. Основним завданням DDL-запитів є створення бази даних та опис її структури.
2.	Використання DCL SQL.
Це підмножина SQL, яка використовується для контролю доступу до даних в реляційних базах даних. Зазвичай команди DCL визначають, хто має право виконувати певні операції з об’єктами бази даних, такими як таблиці, представлення, збережені процедури та функції.
3.	Подання.
Включає в себе спосіб представлення даних у вигляді таблиць, стовпців та рядків
- Таблиці: є основними об’єктами в РБД. Кожна таблиця має назву та структуру, яка визначає стовпці та їх типи даних.
- Стовпці: визначають окремі атрибути даних. Кожен стовпець має ім’я та тип даних.
- Рядки: представляють конкретні записи в таблиці. Кожен рядок містить значення для кожного стовпця.
- Ключі: використовуються для ідентифікації унікальних рядків в таблиці
А)Первинний ключ: унікальний ідентифікатор для кожного рядка в таблиці.
Б)Зовнішній ключ: посилання на рядок в іншій таблиці.
- Нормалізація: процес розбиття таблиць на менші, більш узгоджені структури для зменшення дублікації даних та забезпечення ефективності запитів.
- Запити: використовуються для отримання, оновлення або видалення даних з таблиць. 
4.	Однотабличні запити.
Однотабличні запити в базах даних використовують лише одну таблицю для вибірки даних або виконання операцій. Вони дозволяють отримати певні дані з однієї таблиці, враховуючи певні умови.
5.	Багатотабличні запити.
Багатотабличні запити використовують декілька таблиць для вибірки даних або виконання операцій. Вони дозволяють об’єднувати дані з різних таблиць за певними умовами, використовуючи з’єднання та інші операції.
6.	Основи PL/SQL.
Поєднання SQL та можливостей процедурних мов програмування. Розроблений для розширення можливостей SQL та додавання процедурного програмування до баз даних. Дозволяє виконувати більш складні завдання, такі як створення функцій, процедур, тригерів та обробка винятків.
7.	Типи даних PL/SQL.
PL/SQL має два види типів даних: скалярні та композитні.
- Скалярні типи — зберігають одне значення, такі як числа, булеві значення, символи та дати.
- Композитні типи — зберігають кілька значень. 
8.	Курсори у PL/SQL.
Це вказівники, які вказують на результат запиту. PL/SQL має два типи курсорів: імпліцитні та експліцитні.
- Імпліцитні автоматично створюються при виконанні SQL-запитів, таких як SELECT INTO, INSERT, UPDATE та DELETE. Можуть приводити до винятків
- Експліцитний курсор — це SELECT-запит, який явно визначається в розділі оголошення поточного блоку або специфікації пакета. Можливість контролю над його циклом виконання.



12.	Відновлення бази даних після невдалого завершення транзакції
існують два основних кроки відновлення: кеш-відновлення та відновлення транзакцій.
Під час кеш-відновлення система застосовує всі зміни, записані в журналі відновлень (redo log), до файлів бази даних.
при відновленні транзакцій система застосовує блоки відміни (undo blocks), щоб скасувати непідтверджені зміни в блоках даних, які були записані перед відмовою або були внесені під час кеш-відновлення.
13.	Підтримка транзакцій.
Допомагають забезпечити цілісність та надійність даних. Транзакція - це послідовність одного або кількох запитів до бази даних, які виконуються як єдиний блок. Транзакція може містити операції вставки, оновлення, видалення або інші дії з даними. виконується атомарно, що означає, що вона або повністю виконується, або жодна з її операцій не виконується. Якщо виникає помилка, то всі зміни скасовуються. Транзакція переводить базу даних з одного цілісного стану в інший. Це допомагає зберегти цілісність даних. Транзакції виконуються ізольовано одна від одної. Це означає, що зміни, внесені однією транзакцією, не впливають на інші транзакції. Після успішного виконання транзакції її зміни залишаються в базі даних назавжди.
14.	Функції й архітектура розподілених СУБД.
- Розподілена база даних (РБД): Множина взаємозалежних баз даних, розподілених у комп’ютерній мережі.
- Розподілена система керування базами даних (РСКБД): Програмне забезпечення для керування РБД.
- Фрагментація: Розподіл даних на фрагменти для збереження на різних вузлах.
- Реплікація: Створення копій даних для доступу та надійності.
- Обробка розподілених транзакцій: Транзакції виконуються атомарно, консистентно, ізольовано та з врахуванням тривалості.
15.	Оператори SQL, що формуються під час виконання
Для вирішення завдань у SQL, відповідні команди повинні створюватися, налаштовуватися і виконуватися динамічно під час виконання програми. Це дозволяє формувати SQL-запити залежно від поточних умов і змінних. До них відносяться insert, update, delete, select, create, drop;
16.	Паралельне виконання транзакцій
принципи паралельного виконання транзакцій:
- Атомарність: Транзакція виконується атомарно, що означає, що вона або повністю виконується, або жодна з її операцій не виконується. Якщо виникає помилка, то всі зміни скасовуються (rollback).
- Согласованість: Завершена транзакція фіксує лише допустимі результати. Наприклад, при переводі грошей з одного рахунку на інший, система повинна зберігати баланс.
- Ізольованість: Кожна транзакція повинна бути ізольована від інших, тобто її результат не повинен залежати від паралельних транзакцій.
- Долговічність: Якщо транзакція успішно виконана, то її зміни залишаються в базі даних назавжди.
Управління транзакціями включає команди:
COMMIT: Зберігає зміни.
ROLLBACK: Скасовує (відкатує) зміни.
SAVEPOINT: Створює точку, до якої група транзакцій може відкотитися.
SET TRANSACTION: Встановлює ім’я транзакції.
Ці команди використовуються для DML-операцій і допомагають забезпечити надійність та цілісність даних
17.	Визначення можливостей користувача у базі даних.
- Автентифікація та авторизація;
- Ролі користувачів: MySQL дозволяє створювати ролі, які групують користувачів з однаковими привілеями.
- Права доступу до об’єктів: Користувачам можна надавати права на виконання певних дій з об’єктами бази даних, такими як таблиці, представлення, процедури тощо.
- Обмеження доступу до рядків: MySQL дозволяє встановлювати обмеження на доступ до конкретних рядків даних.
- Аудит дій користувачів: MySQL може вести журнал дій користувачів, що дозволяє відстежувати, хто, коли і як звертався до бази даних.
18.	Вилучення ролей у базі даних
Для видалення ролей в базі даних можна використовувати команди відповідно до обраної системи управління базами даних.
В MySQL використовують команди ALTER USER або REVOKE для видалення користувача з ролі. Для видалення саме ролі - DROP ROLE.
19.	Керуючі структури PL/SQL.
Блоки PL/SQL мають визначену структуру, яка включає такі розділи:
- Розділ декларації: перший розділ блоку, де можна оголосити змінні, курсори, винятки, підпрограми, прагми та колекції, необхідні для виконання коду, є необов’язковим.
- Розділ виконання: Основний обов’язковий розділ, де фактично виконується код. Він може містити як PL/SQL, так і SQL-код.
- Розділ обробки винятків: Необов’язковий розділ, де обробляються винятки, що виникають під час виконання блоку.
20.	Використання глобальних змінних.
Є визначеними системними змінними, які впливають на поведінку всього сервера MySQL. Вони можуть бути встановлені або змінені на рівні сервера, а не на рівні конкретної сесії. Глобальні змінні широко використовуються для налаштування сервера, оптимізації та контролю різних параметрів.
21.	Реалізація ієрархічних запитів у БД.
Ієрархічні запити в базі даних (БД) дозволяють обробляти ієрархічні моделі даних, такі як дерева або графи. Вони дозволяють вам взаємодіяти з даними, які мають батьківські та дочірні відношення.
- Загальний табличний вираз - це тимчасовий іменований результатний набір, що походить із простого запиту та визначений усередині області виконання інструкції SELECT, INSERT, UPDATE чи DELETE; можна розглядати як альтернативу підзапитам, розрізам і вбудованим функціям.
- Рекурсивні ЗТВ дозволяють обходити ієрархічні структури, такі як дерева або графи.
22.	Використання системних функцій у запитах.
- AVG: Ця функція повертає середнє значення числового ряду;
- COUNT: кількість рядків, які відповідають заданій умові;
- MAX і MIN: максимальне і мінімальне значення з набору числових або рядкових значень;
- SUM: сума числового ряду;
- NOW: повертає поточну дату і час;
23.	Визначення дисперсії значення у запитах.
Дисперсія відноситься до статистичних обчислень. Вона вимірює розкид значень в певному наборі даних. Для обчислення дисперсії у запитах MySQL можна використовувати функцію VAR_POP() або VAR_SAMP().
- VAR_POP(): обчислює дисперсію для всіх значень в наборі даних;
- VAR_SAMP(): обчислює дисперсію на основі вибірки з набору даних;
Обидві функції приймають один аргумент - стовпець або вираз, для якого потрібно обчислити дисперсію.
24.	Денормалізація вниз як засіб підвищення продуктивності БД.
Процес при якому дані зводяться до меншої кількості таблиць шляхом об'єднання або дублювання. зменшує кількість JOIN між таблицями, знижує навантаження на систему і прискорює виконання запитів. Може збільшити обсяг даних і потребувати додаткових зусиль для підтримки цілісності.
25.	Праве приєднання даних кількох таблиць.
Використовується для об'єднання даних з кількох таблиць, де всі записи з правої таблиці зберігаються, навіть якщо вони не мають відповідних записів у лівій таблиці. Корисний для отримання повного набору даних з правої таблиці, доповненого відповідною інформацією з лівої таблиці, якщо така існує.













